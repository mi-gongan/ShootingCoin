/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GameCore {
  export type BetInfoStruct = {
    coinAddress: PromiseOrValue<string>;
    betAmount: PromiseOrValue<BigNumberish>;
    nftSkinId: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type BetInfoStructOutput = [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  ] & {
    coinAddress: string;
    betAmount: BigNumber;
    nftSkinId: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  };
}

export interface GameCoreInterface extends utils.Interface {
  functions: {
    "betInfo(address)": FunctionFragment;
    "feeRecieveAddress()": FunctionFragment;
    "gameHistory(address,uint256)": FunctionFragment;
    "gameInfo(uint256)": FunctionFragment;
    "getShootingNft()": FunctionFragment;
    "getShootingRole()": FunctionFragment;
    "isOnGame(address)": FunctionFragment;
    "shootingNft()": FunctionFragment;
    "shootingRole()": FunctionFragment;
    "updateShootingNft(address)": FunctionFragment;
    "updateShootingRole(address)": FunctionFragment;
    "usedSalt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "betInfo"
      | "feeRecieveAddress"
      | "gameHistory"
      | "gameInfo"
      | "getShootingNft"
      | "getShootingRole"
      | "isOnGame"
      | "shootingNft"
      | "shootingRole"
      | "updateShootingNft"
      | "updateShootingRole"
      | "usedSalt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "betInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecieveAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShootingNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShootingRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOnGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shootingNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shootingRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateShootingNft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShootingRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSalt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "betInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecieveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOnGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedSalt", data: BytesLike): Result;

  events: {};
}

export interface GameCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
    >;

    feeRecieveAddress(overrides?: CallOverrides): Promise<[string]>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        gameId: BigNumber;
        user1: string;
        user1coinAddress: string;
        user1GetAmount: BigNumber;
        user2: string;
        user2coinAddress: string;
        user2GetAmount: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        GameCore.BetInfoStructOutput,
        GameCore.BetInfoStructOutput
      ] & {
        user1: string;
        user2: string;
        user1BetInfo: GameCore.BetInfoStructOutput;
        user2BetInfo: GameCore.BetInfoStructOutput;
      }
    >;

    getShootingNft(overrides?: CallOverrides): Promise<[string]>;

    getShootingRole(overrides?: CallOverrides): Promise<[string]>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shootingNft(overrides?: CallOverrides): Promise<[string]>;

    shootingRole(overrides?: CallOverrides): Promise<[string]>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  betInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
  >;

  feeRecieveAddress(overrides?: CallOverrides): Promise<string>;

  gameHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      gameId: BigNumber;
      user1: string;
      user1coinAddress: string;
      user1GetAmount: BigNumber;
      user2: string;
      user2coinAddress: string;
      user2GetAmount: BigNumber;
      timeStamp: BigNumber;
    }
  >;

  gameInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      GameCore.BetInfoStructOutput,
      GameCore.BetInfoStructOutput
    ] & {
      user1: string;
      user2: string;
      user1BetInfo: GameCore.BetInfoStructOutput;
      user2BetInfo: GameCore.BetInfoStructOutput;
    }
  >;

  getShootingNft(overrides?: CallOverrides): Promise<string>;

  getShootingRole(overrides?: CallOverrides): Promise<string>;

  isOnGame(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shootingNft(overrides?: CallOverrides): Promise<string>;

  shootingRole(overrides?: CallOverrides): Promise<string>;

  updateShootingNft(
    nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShootingRole(
    roleContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedSalt(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
    >;

    feeRecieveAddress(overrides?: CallOverrides): Promise<string>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        gameId: BigNumber;
        user1: string;
        user1coinAddress: string;
        user1GetAmount: BigNumber;
        user2: string;
        user2coinAddress: string;
        user2GetAmount: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        GameCore.BetInfoStructOutput,
        GameCore.BetInfoStructOutput
      ] & {
        user1: string;
        user2: string;
        user1BetInfo: GameCore.BetInfoStructOutput;
        user2BetInfo: GameCore.BetInfoStructOutput;
      }
    >;

    getShootingNft(overrides?: CallOverrides): Promise<string>;

    getShootingRole(overrides?: CallOverrides): Promise<string>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shootingNft(overrides?: CallOverrides): Promise<string>;

    shootingRole(overrides?: CallOverrides): Promise<string>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<BigNumber>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShootingNft(overrides?: CallOverrides): Promise<BigNumber>;

    getShootingRole(overrides?: CallOverrides): Promise<BigNumber>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shootingNft(overrides?: CallOverrides): Promise<BigNumber>;

    shootingRole(overrides?: CallOverrides): Promise<BigNumber>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShootingNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShootingRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shootingNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shootingRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
