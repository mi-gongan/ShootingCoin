/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace GameCore {
  export type BetInfoStruct = {
    coinAddress: PromiseOrValue<string>;
    betAmount: PromiseOrValue<BigNumberish>;
    nftSkinId: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type BetInfoStructOutput = [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  ] & {
    coinAddress: string;
    betAmount: BigNumber;
    nftSkinId: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  };

  export type GameInfoStruct = {
    user1: PromiseOrValue<string>;
    user2: PromiseOrValue<string>;
    user1BetInfo: GameCore.BetInfoStruct;
    user2BetInfo: GameCore.BetInfoStruct;
  };

  export type GameInfoStructOutput = [
    string,
    string,
    GameCore.BetInfoStructOutput,
    GameCore.BetInfoStructOutput
  ] & {
    user1: string;
    user2: string;
    user1BetInfo: GameCore.BetInfoStructOutput;
    user2BetInfo: GameCore.BetInfoStructOutput;
  };

  export type GameHistoryStruct = {
    gameId: PromiseOrValue<BigNumberish>;
    user1: PromiseOrValue<string>;
    user1coinAddress: PromiseOrValue<string>;
    user1GetAmount: PromiseOrValue<BigNumberish>;
    user2: PromiseOrValue<string>;
    user2coinAddress: PromiseOrValue<string>;
    user2GetAmount: PromiseOrValue<BigNumberish>;
    timeStamp: PromiseOrValue<BigNumberish>;
  };

  export type GameHistoryStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    gameId: BigNumber;
    user1: string;
    user1coinAddress: string;
    user1GetAmount: BigNumber;
    user2: string;
    user2coinAddress: string;
    user2GetAmount: BigNumber;
    timeStamp: BigNumber;
  };
}

export interface ShootingCoinManagerInterface extends utils.Interface {
  functions: {
    "betInfo(address)": FunctionFragment;
    "checkOnGame(address)": FunctionFragment;
    "despositCoin(address,uint256)": FunctionFragment;
    "enterGame(address,(address,uint256,uint256[5]),uint256)": FunctionFragment;
    "feeRecieveAddress()": FunctionFragment;
    "gameHistory(address,uint256)": FunctionFragment;
    "gameInfo(uint256)": FunctionFragment;
    "getBetInfo(address)": FunctionFragment;
    "getGameInfo(uint256)": FunctionFragment;
    "getHistory(address)": FunctionFragment;
    "getShootingNft()": FunctionFragment;
    "getShootingRole()": FunctionFragment;
    "initialize(address,uint256,address)": FunctionFragment;
    "isOnGame(address)": FunctionFragment;
    "quitGame(address,uint256)": FunctionFragment;
    "settleGame(uint256,address,address,uint256,uint256)": FunctionFragment;
    "shootingNft()": FunctionFragment;
    "shootingRole()": FunctionFragment;
    "startGame(uint256,address,address)": FunctionFragment;
    "updateShootingNft(address)": FunctionFragment;
    "updateShootingRole(address)": FunctionFragment;
    "updateWhiteList(address,bool)": FunctionFragment;
    "usedSalt(uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "betInfo"
      | "checkOnGame"
      | "despositCoin"
      | "enterGame"
      | "feeRecieveAddress"
      | "gameHistory"
      | "gameInfo"
      | "getBetInfo"
      | "getGameInfo"
      | "getHistory"
      | "getShootingNft"
      | "getShootingRole"
      | "initialize"
      | "isOnGame"
      | "quitGame"
      | "settleGame"
      | "shootingNft"
      | "shootingRole"
      | "startGame"
      | "updateShootingNft"
      | "updateShootingRole"
      | "updateWhiteList"
      | "usedSalt"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "betInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOnGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "despositCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterGame",
    values: [
      PromiseOrValue<string>,
      GameCore.BetInfoStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecieveAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShootingNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShootingRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quitGame",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shootingNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shootingRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShootingNft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShootingRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSalt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "betInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkOnGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "despositCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enterGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecieveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBetInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quitGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateShootingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShootingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedSalt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "Entered(address,tuple,uint256)": EventFragment;
    "GameInited(uint256,address,address,tuple)": EventFragment;
    "GameSettled(uint256,address,address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Quited(address,tuple,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Entered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameInited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Quited"): EventFragment;
}

export interface EnteredEventObject {
  user: string;
  betInfo: GameCore.BetInfoStructOutput;
  salt: BigNumber;
}
export type EnteredEvent = TypedEvent<
  [string, GameCore.BetInfoStructOutput, BigNumber],
  EnteredEventObject
>;

export type EnteredEventFilter = TypedEventFilter<EnteredEvent>;

export interface GameInitedEventObject {
  gameId: BigNumber;
  user1: string;
  user2: string;
  gameInfo: GameCore.GameInfoStructOutput;
}
export type GameInitedEvent = TypedEvent<
  [BigNumber, string, string, GameCore.GameInfoStructOutput],
  GameInitedEventObject
>;

export type GameInitedEventFilter = TypedEventFilter<GameInitedEvent>;

export interface GameSettledEventObject {
  gameId: BigNumber;
  user1: string;
  user2: string;
  gameHistory: GameCore.GameHistoryStructOutput;
}
export type GameSettledEvent = TypedEvent<
  [BigNumber, string, string, GameCore.GameHistoryStructOutput],
  GameSettledEventObject
>;

export type GameSettledEventFilter = TypedEventFilter<GameSettledEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface QuitedEventObject {
  user: string;
  betInfo: GameCore.BetInfoStructOutput;
  salt: BigNumber;
}
export type QuitedEvent = TypedEvent<
  [string, GameCore.BetInfoStructOutput, BigNumber],
  QuitedEventObject
>;

export type QuitedEventFilter = TypedEventFilter<QuitedEvent>;

export interface ShootingCoinManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShootingCoinManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
    >;

    checkOnGame(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    despositCoin(
      coinAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterGame(
      account: PromiseOrValue<string>,
      _betInfo: GameCore.BetInfoStruct,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<[string]>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        gameId: BigNumber;
        user1: string;
        user1coinAddress: string;
        user1GetAmount: BigNumber;
        user2: string;
        user2coinAddress: string;
        user2GetAmount: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        GameCore.BetInfoStructOutput,
        GameCore.BetInfoStructOutput
      ] & {
        user1: string;
        user2: string;
        user1BetInfo: GameCore.BetInfoStructOutput;
        user2BetInfo: GameCore.BetInfoStructOutput;
      }
    >;

    getBetInfo(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[GameCore.BetInfoStructOutput]>;

    getGameInfo(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GameCore.GameInfoStructOutput]>;

    getHistory(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[GameCore.GameHistoryStructOutput[]]>;

    getShootingNft(overrides?: CallOverrides): Promise<[string]>;

    getShootingRole(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      roleContract: PromiseOrValue<string>,
      _gameFee: PromiseOrValue<BigNumberish>,
      _feeRecieveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quitGame(
      account: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      user1GetAmount: PromiseOrValue<BigNumberish>,
      user2GetAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shootingNft(overrides?: CallOverrides): Promise<[string]>;

    shootingRole(overrides?: CallOverrides): Promise<[string]>;

    startGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWhiteList(
      coinAddress: PromiseOrValue<string>,
      isWhite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  betInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
  >;

  checkOnGame(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  despositCoin(
    coinAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterGame(
    account: PromiseOrValue<string>,
    _betInfo: GameCore.BetInfoStruct,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRecieveAddress(overrides?: CallOverrides): Promise<string>;

  gameHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      gameId: BigNumber;
      user1: string;
      user1coinAddress: string;
      user1GetAmount: BigNumber;
      user2: string;
      user2coinAddress: string;
      user2GetAmount: BigNumber;
      timeStamp: BigNumber;
    }
  >;

  gameInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      GameCore.BetInfoStructOutput,
      GameCore.BetInfoStructOutput
    ] & {
      user1: string;
      user2: string;
      user1BetInfo: GameCore.BetInfoStructOutput;
      user2BetInfo: GameCore.BetInfoStructOutput;
    }
  >;

  getBetInfo(
    userAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<GameCore.BetInfoStructOutput>;

  getGameInfo(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GameCore.GameInfoStructOutput>;

  getHistory(
    userAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<GameCore.GameHistoryStructOutput[]>;

  getShootingNft(overrides?: CallOverrides): Promise<string>;

  getShootingRole(overrides?: CallOverrides): Promise<string>;

  initialize(
    roleContract: PromiseOrValue<string>,
    _gameFee: PromiseOrValue<BigNumberish>,
    _feeRecieveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOnGame(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quitGame(
    account: PromiseOrValue<string>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleGame(
    gameId: PromiseOrValue<BigNumberish>,
    user1: PromiseOrValue<string>,
    user2: PromiseOrValue<string>,
    user1GetAmount: PromiseOrValue<BigNumberish>,
    user2GetAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shootingNft(overrides?: CallOverrides): Promise<string>;

  shootingRole(overrides?: CallOverrides): Promise<string>;

  startGame(
    gameId: PromiseOrValue<BigNumberish>,
    user1: PromiseOrValue<string>,
    user2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShootingNft(
    nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShootingRole(
    roleContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWhiteList(
    coinAddress: PromiseOrValue<string>,
    isWhite: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedSalt(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { coinAddress: string; betAmount: BigNumber }
    >;

    checkOnGame(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    despositCoin(
      coinAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterGame(
      account: PromiseOrValue<string>,
      _betInfo: GameCore.BetInfoStruct,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<string>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        gameId: BigNumber;
        user1: string;
        user1coinAddress: string;
        user1GetAmount: BigNumber;
        user2: string;
        user2coinAddress: string;
        user2GetAmount: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        GameCore.BetInfoStructOutput,
        GameCore.BetInfoStructOutput
      ] & {
        user1: string;
        user2: string;
        user1BetInfo: GameCore.BetInfoStructOutput;
        user2BetInfo: GameCore.BetInfoStructOutput;
      }
    >;

    getBetInfo(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<GameCore.BetInfoStructOutput>;

    getGameInfo(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GameCore.GameInfoStructOutput>;

    getHistory(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<GameCore.GameHistoryStructOutput[]>;

    getShootingNft(overrides?: CallOverrides): Promise<string>;

    getShootingRole(overrides?: CallOverrides): Promise<string>;

    initialize(
      roleContract: PromiseOrValue<string>,
      _gameFee: PromiseOrValue<BigNumberish>,
      _feeRecieveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quitGame(
      account: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      user1GetAmount: PromiseOrValue<BigNumberish>,
      user2GetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shootingNft(overrides?: CallOverrides): Promise<string>;

    shootingRole(overrides?: CallOverrides): Promise<string>;

    startGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhiteList(
      coinAddress: PromiseOrValue<string>,
      isWhite: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Entered(address,tuple,uint256)"(
      user?: null,
      betInfo?: null,
      salt?: null
    ): EnteredEventFilter;
    Entered(user?: null, betInfo?: null, salt?: null): EnteredEventFilter;

    "GameInited(uint256,address,address,tuple)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      user1?: PromiseOrValue<string> | null,
      user2?: PromiseOrValue<string> | null,
      gameInfo?: null
    ): GameInitedEventFilter;
    GameInited(
      gameId?: PromiseOrValue<BigNumberish> | null,
      user1?: PromiseOrValue<string> | null,
      user2?: PromiseOrValue<string> | null,
      gameInfo?: null
    ): GameInitedEventFilter;

    "GameSettled(uint256,address,address,tuple)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      user1?: PromiseOrValue<string> | null,
      user2?: PromiseOrValue<string> | null,
      gameHistory?: null
    ): GameSettledEventFilter;
    GameSettled(
      gameId?: PromiseOrValue<BigNumberish> | null,
      user1?: PromiseOrValue<string> | null,
      user2?: PromiseOrValue<string> | null,
      gameHistory?: null
    ): GameSettledEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Quited(address,tuple,uint256)"(
      user?: null,
      betInfo?: null,
      salt?: null
    ): QuitedEventFilter;
    Quited(user?: null, betInfo?: null, salt?: null): QuitedEventFilter;
  };

  estimateGas: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkOnGame(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    despositCoin(
      coinAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterGame(
      account: PromiseOrValue<string>,
      _betInfo: GameCore.BetInfoStruct,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<BigNumber>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetInfo(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameInfo(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistory(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShootingNft(overrides?: CallOverrides): Promise<BigNumber>;

    getShootingRole(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      roleContract: PromiseOrValue<string>,
      _gameFee: PromiseOrValue<BigNumberish>,
      _feeRecieveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quitGame(
      account: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      user1GetAmount: PromiseOrValue<BigNumberish>,
      user2GetAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shootingNft(overrides?: CallOverrides): Promise<BigNumber>;

    shootingRole(overrides?: CallOverrides): Promise<BigNumber>;

    startGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWhiteList(
      coinAddress: PromiseOrValue<string>,
      isWhite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOnGame(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    despositCoin(
      coinAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterGame(
      account: PromiseOrValue<string>,
      _betInfo: GameCore.BetInfoStruct,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRecieveAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetInfo(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameInfo(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistory(
      userAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShootingNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShootingRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      roleContract: PromiseOrValue<string>,
      _gameFee: PromiseOrValue<BigNumberish>,
      _feeRecieveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOnGame(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quitGame(
      account: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      user1GetAmount: PromiseOrValue<BigNumberish>,
      user2GetAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shootingNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shootingRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startGame(
      gameId: PromiseOrValue<BigNumberish>,
      user1: PromiseOrValue<string>,
      user2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShootingNft(
      nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShootingRole(
      roleContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWhiteList(
      coinAddress: PromiseOrValue<string>,
      isWhite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedSalt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
