/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CurrencyController,
  CurrencyControllerInterface,
} from "../../../contracts/libs/CurrencyController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "coinAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "despositCoin",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610386806100206000396000f3fe60806040526004361061001e5760003560e01c8063229f1db614610023575b600080fd5b61003d600480360381019061003891906101d9565b61003f565b005b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100ba578034146100b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ac90610276565b60405180910390fd5b61013c565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016100f7939291906102b4565b6020604051808303816000875af1158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a9190610323565b505b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061017082610145565b9050919050565b61018081610165565b811461018b57600080fd5b50565b60008135905061019d81610177565b92915050565b6000819050919050565b6101b6816101a3565b81146101c157600080fd5b50565b6000813590506101d3816101ad565b92915050565b600080604083850312156101f0576101ef610140565b5b60006101fe8582860161018e565b925050602061020f858286016101c4565b9150509250929050565b600082825260208201905092915050565b7f77726f6e6720616d6f756e740000000000000000000000000000000000000000600082015250565b6000610260600c83610219565b915061026b8261022a565b602082019050919050565b6000602082019050818103600083015261028f81610253565b9050919050565b61029f81610165565b82525050565b6102ae816101a3565b82525050565b60006060820190506102c96000830186610296565b6102d66020830185610296565b6102e360408301846102a5565b949350505050565b60008115159050919050565b610300816102eb565b811461030b57600080fd5b50565b60008151905061031d816102f7565b92915050565b60006020828403121561033957610338610140565b5b60006103478482850161030e565b9150509291505056fea2646970667358221220c0dd36f253be6ac91f1995cd564c231110af105016063629ea839ab5e9c3b43964736f6c63430008110033";

type CurrencyControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurrencyControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurrencyController__factory extends ContractFactory {
  constructor(...args: CurrencyControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurrencyController> {
    return super.deploy(overrides || {}) as Promise<CurrencyController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurrencyController {
    return super.attach(address) as CurrencyController;
  }
  override connect(signer: Signer): CurrencyController__factory {
    return super.connect(signer) as CurrencyController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurrencyControllerInterface {
    return new utils.Interface(_abi) as CurrencyControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurrencyController {
    return new Contract(address, _abi, signerOrProvider) as CurrencyController;
  }
}
